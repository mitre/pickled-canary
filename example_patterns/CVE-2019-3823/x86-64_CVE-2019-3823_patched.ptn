; This pattern tests for the patch of CVE-2019-3823 for x86:LE:64:default.

; Info about the CVE: https://github.com/curl/curl/commit/39df4073e5413fcdbb5a38da0c1ce6f1c0ceb484
; Summary: This CVE involves a buffer overflow vulnerability while using the strtol function. A
; string is passed into the strtol function, but if no null terminator is present within the
; string's buffer, strtol will overread the buffer.

; Patched code:
; char tmpline[6];
; result = TRUE;
; memset(tmpline, '\0', sizeof(tmpline)); //make sure string being passed into strtol has null byte
; memcpy(tmpline, line, (len == 5 ? 5 : 3)); //copy only a certain number of bytes into the buffer
; *resp = curlx_sltosi(strtol(tmpline, NULL, 10));

; Pattern written with: libcurl/libcurl_versions/from_tool/testdata/libcurl.so.4.5.0_6.10.2 (x86).zip.2ffde1334bfedebc5f8647a7f1b7d1aeb6eb26e300c187f9529d8cbb4e025dea
;                             LAB_00140c83
;        00140c83 89  c2           MOV        EDX ,EAX
;        00140c85 83  c0  01       ADD        EAX ,0x1
;        00140c88 0f  b6  74       MOVZX      ESI ,byte ptr [RBP  + RDX *0x1 ]
;                 15  00
;        00140c8d 39  c8           CMP        EAX ,ECX
;        00140c8f 40  88  34  17    MOV        byte ptr [RDI  + RDX *0x1 ]=>local_38 ,SIL
;        00140c93 72  ee           JC         LAB_00140c83
;                             LAB_00140c95
;        00140c95 ba  0a  00       MOV        EDX ,0xa
;                 00  00
;        00140c9a 31  f6           XOR        ESI ,ESI
;        00140c9c e8  3f  9f       CALL       <EXTERNAL>::strtol
;                 fc  ff
;        00140ca1 48  89  c7       MOV        RDI ,RAX
;        00140ca4 e8  97  30       CALL       FUN_00143d40
;                 00  00

; instead of calling memcpy, the assembler seems to implement its own
; this block of code is the loop the copy bytes to the new buffer
; Q1 & Q2 is current index of loop
MOV `Q1/E.X`, `Q2/E.X`
; i++
ADD `Q2`,0x1
; get the ith char from line
; Q3 is 64 bit version of Q1
MOVZX ESI,byte ptr [`*`+`Q3/R.X`*0x1]
; check if index is less than length of new buffer
CMP `Q2`,`*`
; copy ith char into new buffer
MOV byte ptr [`*`+`Q3`*0x1],SIL
; go back to the beginning of this block if index < buffer len
JC `*`

`ANY_BYTES{0,7}`

; call strtol
CALL `*`

`ANY_BYTES{0,3}`

; call curlx_sltosi
CALL `*`

; Copyright (C) 2023 The MITRE Corporation All Rights Reserved
