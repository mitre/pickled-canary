; This pattern tests for the presence of CVE-2015-3145 for MIPS:LE:32:default.

; Info about the CVE: https://github.com/curl/curl/commit/b5f947b8ac0e282c61c75b69cd5b9d37dafc6959
; Summary: A cookie path is passed into a function, and the first character is removed if it is a
; double quote. It then checks if the last character (strlen(new_path) - 1) is a double quote and
; sets the last character to 0 if so. If a single double quote is passed in as the cookie path, the
; last character's index would be calculated as -1.

; Vulnerable code:
; if(new_path[0] == '\"') {
;   memmove((void *)new_path, (const void *)(new_path + 1), strlen(new_path));
; }
; if(new_path[strlen(new_path) - 1] == '\"') { // (strlen(new_path) - 1) could be negative
;   new_path[strlen(new_path) - 1] = 0x0;
; }

; Pattern written with: libcurl/libcurl_versions/cameras/libcurl.so.4.3.0_yi_home_1.8.5.1I_201506291725
;        0001a3b8 00 00 43 80     lb         v1,0x0(v0)
;        0001a3bc 22 00 02 24     li         v0,0x22
;        0001a3c0 3d 00 62 10     beq        v1,v0,LAB_0001a4b8
;        0001a3c4 00 00 00 00     _nop
;                             LAB_0001a3c8
;        0001a3c8 0c 89 99 8f     lw         t9,-0x76f4(gp)=>-><EXTERNAL>::strlen
;        0001a3cc 00 00 00 00     nop
;        0001a3d0 09 f8 20 03     jalr       t9=><EXTERNAL>::strlen
;        0001a3d4 21 20 00 02     _move      a0,s0
;        0001a3d8 ff ff 42 24     addiu      v0,v0,-0x1
;        0001a3dc 21 10 02 02     addu       v0,s0,v0
;        0001a3e0 00 00 44 80     lb         a0,0x0(v0)
;        0001a3e4 22 00 03 24     li         v1,0x22
;        0001a3e8 10 00 bc 8f     lw         gp,local_18(sp)
;        0001a3ec 28 00 83 10     beq        a0,v1,LAB_0001a490
; ...
;                             LAB_0001a490
;        0001a490 d8 ff 00 10     b          LAB_0001a3f4
;        0001a494 00 00 40 a0     _sb        zero,0x0(v0)
; ...
;                             LAB_0001a4b8
;        0001a4b8 0c 89 99 8f     lw         t9,-0x76f4(gp)=>-><EXTERNAL>::strlen
;        0001a4bc 00 00 00 00     nop
;        0001a4c0 09 f8 20 03     jalr       t9=><EXTERNAL>::strlen
;        0001a4c4 21 20 00 02     _move      a0,s0
;        0001a4c8 10 00 bc 8f     lw         gp,local_18(sp)
;        0001a4cc 21 20 00 02     move       a0,s0
;        0001a4d0 01 00 05 26     addiu      a1,s0,0x1
;        0001a4d4 7c 88 99 8f     lw         t9,-0x7784(gp)=>-><EXTERNAL>::memmove
;        0001a4d8 00 00 00 00     nop
;        0001a4dc 09 f8 20 03     jalr       t9=><EXTERNAL>::memmove



; new_path[0] == '\"'
lb `Q1/v.`,0x0(`Q2/v.`)
li `Q3/v.`,0x22
beq `Q1`,`Q3`,`*`

`ANY_BYTES{0,12}`

; call strlen
jalr `*`

`ANY_BYTES{0,4}`

; calculate (strlen - 1)
addiu v0,v0,-0x1

`ANY_BYTES{0,4}`

; new_path[strlen(new_path) - 1] == '\"'
lb `Q4/a.`,0x0(v0)
li `Q5/v.`,0x22
`ANY_BYTES{0,4}`
beq `Q4`,`Q5`,`*`

`ANY_BYTES{160,170}`

; put 0 in new_path[strlen(new_path) - 1] if above true
sb zero,0x0(v0)

`ANY_BYTES{36,44}`

; call strlen
jalr `*`

`ANY_BYTES{0,8}`

; call memmove
move a0,`Q6/s.`
addiu a1,`Q6`,0x1
`ANY_BYTES{0,8}`
jalr `*`

; Copyright (C) 2023 The MITRE Corporation All Rights Reserved
