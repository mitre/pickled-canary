; This pattern tests for the patch of CVE-2015-3145 for MIPS:LE:32:default.

; Info about the CVE: https://github.com/curl/curl/commit/b5f947b8ac0e282c61c75b69cd5b9d37dafc6959
; Summary: A cookie path is passed into a function, and the first character is removed if it is a
; double quote. It then checks if the last character (strlen(new_path) - 1) is a double quote and
; sets the last character to 0 if so. If a single double quote is passed in as the cookie path, the
; last character's index would be calculated as -1.

; Patched code:
; len = strlen(new_path);
; if(new_path[0] == '\"') {
;   memmove((void *)new_path, (const void *)(new_path + 1), len);
;   len--;
; }
; if(len && (new_path[len - 1] == '\"')) {
;   new_path[len - 1] = 0x0;
;   len--;
; }

; Pattern written with: libcurl/libcurl_versions/from_tool/testdata/libcurl.so.4.3.0_1.2.0.62.zip.03b34fc901db3fc2364f82cc529a20284fb1b3c1520ef276423d04aaaaa6ea8b_1
;        000195e4 09 f8 20 03     jalr       t9=><EXTERNAL>::strlen
;        000195e8 21 90 20 02     _move      s2,s1
;        000195ec 00 00 03 82     lb         v1,0x0(s0)
;        000195f0 21 88 40 00     move       s1,v0
;        000195f4 22 00 02 24     li         v0,0x22
;        000195f8 08 00 62 14     bne        v1,v0,LAB_0001961c
;        000195fc 10 00 bc 8f     _lw        gp,local_18(sp)
;        00019600 a4 8a 99 8f     lw         t9,-0x755c(gp)=>-><EXTERNAL>::memmove
;        00019604 21 30 20 02     move       a2,s1
;        00019608 21 20 00 02     move       a0,s0
;        0001960c 09 f8 20 03     jalr       t9=><EXTERNAL>::memmove
;        00019610 01 00 05 26     _addiu     a1,s0,0x1
;        00019614 10 00 bc 8f     lw         gp,local_18(sp)
;        00019618 ff ff 31 26     addiu      s1,s1,-0x1
;                             LAB_0001961c
;        0001961c 0a 00 20 52     beql       s1,zero,LAB_00019648
;        00019620 00 00 03 82     _lb        v1,0x0(s0)
;        00019624 ff ff 22 26     addiu      v0,s1,-0x1
;        00019628 21 18 02 02     addu       v1,s0,v0
;        0001962c 00 00 65 80     lb         a1,0x0(v1)
;        00019630 22 00 04 24     li         a0,0x22
;        00019634 04 00 a4 54     bnel       a1,a0,LAB_00019648
;        00019638 00 00 03 82     _lb        v1,0x0(s0)
;        0001963c 00 00 60 a0     sb         zero,0x0(v1)


; call to strlen
jalr `*`

`ANY_BYTES{0,4}`

; new_path[0] == '\"'
lb `Q1/v.`,0x0(`Q2/s.`)
`ANY_BYTES{0,4}`
li `Q3/v.`,0x22
`ANY_BYTES{0,4}`
bne `Q1`,`Q3`,`*`

`ANY_BYTES{0,8}`

; call memmove
move a2,`Q4/s.`
`ANY_BYTES{0,4}`
move a0,`Q5/s.`
jalr `*`
addiu a1,`Q5`,0x1

`ANY_BYTES{0,4}`

; len--
addiu `Q4`,`Q4`,-0x1

`ANY_BYTES{0,8}`

; the second len--
addiu `Q6/v.`,`Q4`,-0x1

`ANY_BYTES{0,4}`

; new_path[strlen(new_path) - 1] == '\"'
lb `Q7/a.`,0x0(`Q8/v.`)
li `Q9/a.`,0x22
`START_OR`
    bnel `Q7`,`Q9`,`*`
`OR`
    bne `Q7`,`Q9`,`*`
`END_OR`

`ANY_BYTES{0,4}`

; put 0 in new_path[strlen(new_path) - 1] if above true
sb zero,0x0(`Q10/v.`)

; Copyright (C) 2025 The MITRE Corporation All Rights Reserved
