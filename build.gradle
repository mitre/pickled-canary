/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.
plugins {
    id("java")
    id("jacoco")
}
//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir = "/Users/wjordan/Projects/PickledCanary/bin/ghidra_11.1_DEV"

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories {
	// Declare dependency repositories here.  This is not needed if dependencies are manually 
	// dropped into the lib/ directory.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html for more info.
	// Ex: mavenCentral()
	mavenCentral()
}

test {
	useJUnitPlatform()

	maxHeapSize='1G'
}

dependencies {
	// Any external dependencies added here will automatically be copied to the lib/ directory when
	// this extension is built.
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.3'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.3'
	testCompileOnly 'junit:junit:4.12' 
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.1'
	testImplementation 'org.jacoco:org.jacoco.agent:0.8.9'
    testImplementation 'org.jacoco:org.jacoco.ant:0.8.9'

}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }
    dependsOn test // tests are required to run before generating the report
}


// Exclude additional files from the built extension
// Ex: buildExtension.exclude '.idea/**'

buildExtension.exclude 'search/**'
buildExtension.exclude 'example_patterns/**'
