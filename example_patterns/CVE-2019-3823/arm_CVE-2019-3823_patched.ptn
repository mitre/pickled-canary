; This pattern tests for the patch of CVE-2019-3823 for ARM:LE:32:v8.

; Info about the CVE: https://github.com/curl/curl/commit/39df4073e5413fcdbb5a38da0c1ce6f1c0ceb484
; Summary: This CVE involves a buffer overflow vulnerability while using the strtol function. A
; string is passed into the strtol function, but if no null terminator is present within the
; string's buffer, strtol will overread the buffer.

; Patched code:
; char tmpline[6];
; result = TRUE;
; memset(tmpline, '\0', sizeof(tmpline)); //make sure string being passed into strtol has null byte
; memcpy(tmpline, line, (len == 5 ? 5 : 3)); //copy only a certain number of bytes into the buffer
; *resp = curlx_sltosi(strtol(tmpline, NULL, 10));

; Pattern written with:
; 1) libcurl/libcurl_versions/from_tool/testdata/libcurl.so.4.5.0_3.0.0.4.384_47912_Global.zip.d16a2f7cc11c34ac246a9da227bde70967b1459ab7c77d8a0f3f97b73e4964a0
;                             LAB_00047b18
;        00047b18 03  00  a0  e1    cpy        r0,r3
;        00047b1c 07  10  a0  e1    cpy        r1,r7
;        00047b20 0a  3a  ff  eb    bl         <EXTERNAL>::memcpy
;        00047b24 0a  20  a0  e3    mov        r2,#0xa
;        00047b28 00  10  a0  e3    mov        r1,#0x0
;        00047b2c ee  3a  ff  eb    bl         <EXTERNAL>::strtol
;        00047b30 44  0b  00  eb    bl         FUN_0004a848
;        00047b34 01  20  a0  e3    mov        r2,#0x1
;        00047b38 02  00  50  e1    cmp        r0,r2
;        00047b3c 00  00  a0  03    moveq      r0,#0x0
;        00047b40 00  00  85  e5    str        r0,[r5,#0x0 ]
;        00047b44 d3  ff  ff  ea    b          LAB_00047a98
;                             LAB_00047b48
;        00047b48 05  00  54  e3    cmp        r4,#0x5
;        00047b4c 00  10  a0  e3    mov        r1,#0x0
;        00047b50 0d  30  a0  e1    cpy        r3,sp
;        00047b54 00  10  8d  e5    str        r1,[sp,#0x0 ]=>local_20
;        00047b58 05  20  a0  03    moveq      r2,#0x5
;        00047b5c 03  20  a0  13    movne      r2,#0x3
;        00047b60 b4  10  cd  e1    strh       r1,[sp,#local_1c ]
;        00047b64 eb  ff  ff  ea    b          LAB_00047b18
;
; and 2) libcurl/libcurl_versions/from_tool/testdata/libcurl.so.4.5.0_1.0.5.14 (Multi-Language Support).zip.17e3b10fc193b8305af30f26542d31b5b159e51d8d3685d38aa2b4763114c2f1
;                             LAB_00046ec8
;        00046ec8 05  10  a0  e1    cpy        r1,r5
;        00046ecc 0d  00  a0  e1    cpy        r0,sp
;        00046ed0 2b  3a  ff  eb    bl         <EXTERNAL>::memcpy
;        00046ed4 00  10  a0  e3    mov        r1,#0x0
;        00046ed8 0a  20  a0  e3    mov        r2,#0xa
;        00046edc 0d  00  a0  e1    cpy        r0,sp
;        00046ee0 e1  3a  ff  eb    bl         <EXTERNAL>::strtol
;        00046ee4 c4  09  00  eb    bl         FUN_000495fc
;        00046ee8 01  00  50  e3    cmp        r0,#0x1
;        00046eec 00  30  a0  11    cpyne      r3,r0
;        00046ef0 00  30  a0  03    moveq      r3,#0x0
;        00046ef4 01  00  a0  e3    mov        r0,#0x1
;        00046ef8 00  30  86  e5    str        r3,[r6,#0x0 ]
;        00046efc cf  ff  ff  ea    b          LAB_00046e40
;                             LAB_00046f00
;        00046f00 05  00  54  e3    cmp        r4,#0x5
;        00046f04 00  30  a0  e3    mov        r3,#0x0
;        00046f08 03  20  a0  13    movne      r2,#0x3
;        00046f0c 05  20  a0  03    moveq      r2,#0x5
;        00046f10 0d  70  a0  e1    cpy        r7,sp
;        00046f14 00  30  8d  e5    str        r3,[sp,#0x0 ]
;        00046f18 b4  30  cd  e1    strh       r3,[sp,#0x4 ]
;        00046f1c e9  ff  ff  ea    b          LAB_00046ec8


; call to memcpy
bl `*`

; pass 0 as the 2nd arg and 10 as the 3rd arg into strtol
`START_OR`
    mov r1,#0x0
    mov r2,#0xa
`OR`
    mov r2,#0xa
    mov r1,#0x0
`END_OR`

`ANY_BYTES{0,4}`

; call strtol
bl `*`

; call curlx_sltosi
bl `*`

`ANY_BYTES{0,24}`

; below determines whether third arg into memcpy is 5 or 3
; check if len == 5
cmp `*`,#0x5

`ANY_BYTES{0,12}`

; set the argument
`START_OR`
    moveq r2,#0x5
    movne r2,#0x3
`OR`
    movne r2,#0x3
    moveq r2,#0x5
`END_OR`

; Copyright (C) 2025 The MITRE Corporation All Rights Reserved
